/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow strict
 */

import type {ElementNode, DecoratorNode} from 'lexical';
import {LexicalEditor} from 'lexical';
import * as React from 'react';

export type BlockNode<T> = ElementNode | DecoratorNode<T>;
export type BlockNodeKlass<T> = Class<BlockNode<T>>;
export type OnNormalizeFn<T> = (
  node: BlockNode<T>,
  previousParent: ElementNode,
  event?: 'paste',
) => void;

declare export function LexicalBlockNodeNormalizerPlugin__EXPERIMENTAL(props: {
  blockNodes: Array<Class<React.Node>>;
  $onNormalize?: OnNormalizeFn<React.Node>;
}): React$Node;

declare export function registerBlockNodeNormalizerPlugin__EXPERIMENTAL<T>(
  editor: LexicalEditor,
  nodes: Array<Class<T>>,
  $onNormalize?: OnNormalizeFn<React.Node>
): () => void;
